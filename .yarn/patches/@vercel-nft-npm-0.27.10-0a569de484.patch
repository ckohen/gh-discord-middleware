diff --git a/out/node-file-trace.d.ts b/out/node-file-trace.d.ts
index ff8168c5c564f3ea23f302bebc9d2ab199b2436b..15b4297912addd3656224fd52602330efa396bec 100644
--- a/out/node-file-trace.d.ts
+++ b/out/node-file-trace.d.ts
@@ -25,7 +25,7 @@ export declare class Job {
     reasons: NodeFileTraceReasons;
     private cachedFileSystem;
     private remappings;
-    constructor({ base, processCwd, exports, conditions, exportsOnly, paths, ignore, log, mixedModules, ts, analysis, cache, fileIOConcurrency, }: NodeFileTraceOptions);
+    constructor({ base, processCwd, exports, conditions, exportsOnly, paths, ignore, log, mixedModules, ts, analysis, cache, web, fileIOConcurrency, }: NodeFileTraceOptions);
     addRemapping(path: string, dep: string): void;
     readlink(path: string): Promise<string | null>;
     isFile(path: string): Promise<boolean>;
diff --git a/out/node-file-trace.js b/out/node-file-trace.js
index a2ae5f6f7ac0efebf6f35483902d38fd456b9a4b..de4f00b9c85484a91f556846f167f5256e4a3efe 100644
--- a/out/node-file-trace.js
+++ b/out/node-file-trace.js
@@ -63,7 +63,7 @@ async function nodeFileTrace(files, opts = {}) {
 }
 exports.nodeFileTrace = nodeFileTrace;
 class Job {
-    constructor({ base = process.cwd(), processCwd, exports, conditions = exports || ['node'], exportsOnly = false, paths = {}, ignore, log = false, mixedModules = false, ts = true, analysis = {}, cache, 
+    constructor({ base = process.cwd(), processCwd, exports, conditions = exports || ['node'], exportsOnly = false, paths = {}, ignore, log = false, mixedModules = false, ts = true, analysis = {}, cache, web = false,
     // we use a default of 1024 concurrency to balance
     // performance and memory usage for fs operations
     fileIOConcurrency = 1024, }) {
@@ -152,6 +152,7 @@ class Job {
         this.paths = resolvedPaths;
         this.log = log;
         this.mixedModules = mixedModules;
+        this.web = web;
         this.cachedFileSystem = new fs_1.CachedFileSystem({ cache, fileIOConcurrency });
         this.analysis = {};
         if (analysis !== false) {
diff --git a/out/resolve-dependency.js b/out/resolve-dependency.js
index e25c0c6e56514d95a9339dcedadfd97344f4a167..3e97cd6b2a6cb1786508bd88a5435cceedd4172e 100644
--- a/out/resolve-dependency.js
+++ b/out/resolve-dependency.js
@@ -71,9 +71,10 @@ async function resolveDir(path, parent, job) {
     if (!(await job.isDir(path)))
         return;
     const pkgCfg = await getPkgCfg(path, job);
-    if (pkgCfg && typeof pkgCfg.main === 'string') {
-        const resolved = (await resolveFile((0, path_1.resolve)(path, pkgCfg.main), parent, job)) ||
-            (await resolveFile((0, path_1.resolve)(path, pkgCfg.main, 'index'), parent, job));
+    if (pkgCfg && ((job.web && (typeof pkgCfg.browser === 'string' || typeof pkgCfg.module === 'string')) || typeof pkgCfg.main === 'string')) {
+        const fieldValue = job.web ? (typeof pkgCfg.browser === 'string' ? pkgCfg.browser : pkgCfg.web): pkgCfg.main;
+        const resolved = (await resolveFile((0, path_1.resolve)(path, fieldValue), parent, job)) ||
+            (await resolveFile((0, path_1.resolve)(path, fieldValue, 'index'), parent, job));
         if (resolved) {
             await job.emitFile(path + path_1.sep + 'package.json', 'resolve', parent);
             return resolved;
diff --git a/out/types.d.ts b/out/types.d.ts
index 6d230ebb6ef27fbb5e084e63d25eff48b260458f..c1178684bbb5c7b2b1739d6e6d7917cb7db0a996 100644
--- a/out/types.d.ts
+++ b/out/types.d.ts
@@ -49,6 +49,7 @@ export interface NodeFileTraceOptions {
     readlink?: (path: string) => Promise<string | null>;
     resolve?: (id: string, parent: string, job: Job, cjsResolve: boolean) => Promise<string | string[]>;
     fileIOConcurrency?: number;
+    web?: boolean;
 }
 export type NodeFileTraceReasonType = 'initial' | 'resolve' | 'dependency' | 'asset' | 'sharedlib';
 export interface NodeFileTraceReasons extends Map<string, {
